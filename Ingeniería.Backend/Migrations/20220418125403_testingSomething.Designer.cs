// <auto-generated />
using System;
using Ingeniería.Backend.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ingeniería.Backend.Migrations
{
    [DbContext(typeof(SqLiteDbContext))]
    [Migration("20220418125403_testingSomething")]
    partial class testingSomething
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.3.22175.1");

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Marcas", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoría")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categorías", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Monedas", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripción")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int>("PedidoId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dirección")
                        .HasColumnType("TEXT");

                    b.Property<string>("RazónSocial")
                        .HasColumnType("TEXT");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Comprobantes", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Order", b =>
                {
                    b.HasOne("Ingeniería.Backend.Modelos.Customer", "Cliente")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingeniería.Backend.Modelos.User", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId");

                    b.Navigation("Cliente");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Product", b =>
                {
                    b.HasOne("Ingeniería.Backend.Modelos.Brand", "Marca")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingeniería.Backend.Modelos.Category", "Categoría")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingeniería.Backend.Modelos.Order", "Pedido")
                        .WithMany("Productos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoría");

                    b.Navigation("Marca");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Receipt", b =>
                {
                    b.HasOne("Ingeniería.Backend.Modelos.Currency", "Moneda")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingeniería.Backend.Modelos.Order", "Order")
                        .WithOne("Comprobante")
                        .HasForeignKey("Ingeniería.Backend.Modelos.Receipt", "ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moneda");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ingeniería.Backend.Modelos.Order", b =>
                {
                    b.Navigation("Comprobante");

                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
